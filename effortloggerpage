import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;

public class EffortLogger extends JFrame {
    private JTextField projectNameField;
    private JTextField lifeCycleStepField;
    private JComboBox<Integer> effortCategoryDropdown;
    private JTextArea logTextArea;
    private JLabel statusLabel;
    private JPanel statusPanel;

    private Date startTime;
    private Date stopTime;
    private boolean clockRunning;

    public EffortLogger() {
        // Set up the main frame
        setTitle("Effort Logger");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Create components
        projectNameField = new JTextField(20);
        lifeCycleStepField = new JTextField(20);
        effortCategoryDropdown = new JComboBox<>(new Integer[]{1, 2, 3, 4, 5});
        logTextArea = new JTextArea(10, 30);
        logTextArea.setEditable(false);

        JButton startButton = new JButton("Start an Activity");
        JButton stopButton = new JButton("Stop this Activity");

        // Set up layout
        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

        // Add status panel with background color
        statusPanel = new JPanel();
        statusPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        statusPanel.setBackground(Color.RED);  // Set initial color
        statusPanel.setOpaque(true);  // Ensure panel is opaque

        // Add status label to the panel
        statusLabel = new JLabel("Clock is stopped");
        statusPanel.add(statusLabel);

        add(statusPanel);

        add(Box.createVerticalStrut(10)); // Add some space

        // Add components to the frame with space between lines
        add(new JLabel("Project Name:"));
        add(projectNameField);

        add(Box.createVerticalStrut(10)); // Add some space

        add(new JLabel("Life Cycle Step:"));
        add(lifeCycleStepField);

        add(Box.createVerticalStrut(10)); // Add some space

        add(new JLabel("Effort Category:"));
        add(effortCategoryDropdown);

        add(Box.createVerticalStrut(10)); // Add some space

        add(startButton);

        add(Box.createVerticalStrut(10)); // Add some space

        add(stopButton);

        add(Box.createVerticalStrut(10)); // Add some space

        add(new JLabel("Log:"));
        add(new JScrollPane(logTextArea));

        // Add action listeners to buttons
        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startActivity();
            }
        });

        stopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                stopActivity();
            }
        });
    }

    private void startActivity() {
        startTime = new Date();
        clockRunning = true;
        updateStatusLabel();
        logTextArea.setText("Activity started at: " + formatDateTime(startTime) + "\n");
    }

    private void stopActivity() {
        if (startTime == null) {
            JOptionPane.showMessageDialog(this, "No activity is currently in progress.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        stopTime = new Date();
        clockRunning = false;
        updateStatusLabel();

        String projectName = projectNameField.getText();
        String lifeCycleStep = lifeCycleStepField.getText();
        int effortCategory = (Integer) effortCategoryDropdown.getSelectedItem();

        String logEntry = "Project: " + projectName +
                "\nLife Cycle Step: " + lifeCycleStep +
                "\nEffort Category: " + effortCategory +
                "\nStart Time: " + formatDateTime(startTime) +
                "\nStop Time: " + formatDateTime(stopTime) +
                "\nDuration: " + calculateDuration(startTime, stopTime) + " seconds\n\n";

        logTextArea.append(logEntry);
        clearFields();
    }

    private String formatDateTime(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return dateFormat.format(date);
    }

    private long calculateDuration(Date startTime, Date stopTime) {
        long diffInMilliseconds = stopTime.getTime() - startTime.getTime();
        return diffInMilliseconds / 1000;
    }

    private void clearFields() {
        projectNameField.setText("");
        lifeCycleStepField.setText("");
        effortCategoryDropdown.setSelectedIndex(0);
        startTime = null;
        stopTime = null;
        updateStatusLabel();
    }

    private void updateStatusLabel() {
        if (clockRunning) {
            statusLabel.setText("Clock is running");
            statusPanel.setBackground(Color.GREEN);
        } else {
            statusLabel.setText("Clock is stopped");
            statusPanel.setBackground(Color.RED);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EffortLogger().setVisible(true);
            }
        });
    }
}
